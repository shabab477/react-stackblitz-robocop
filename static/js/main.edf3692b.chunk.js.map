{"version":3,"sources":["Card.js","robots.js","CardList.js","serviceWorker.js","SearchBox.js","App.js","index.js"],"names":["Card","name","email","id","className","alt","src","robots","username","CardList","cardComponent","map","user","i","key","Boolean","window","location","hostname","match","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAqBeA,G,MAjBF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACC,yBAAKC,UAAY,qDACV,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,YAC3B,6BACC,gCAAMF,EAAN,KACA,+BAAKC,EAAL,SCVSK,EAAS,CACpB,CACEJ,GAAI,EACJF,KAAM,gBACNO,SAAU,OACVN,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNO,SAAU,YACVN,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNO,SAAU,WACVN,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNO,SAAU,WACVN,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNO,SAAU,SACVN,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNO,SAAU,mBACVN,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNO,SAAU,eACVN,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNO,SAAU,gBACVN,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNO,SAAU,WACVN,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNO,SAAU,iBACVN,MAAO,0BAET,CACEC,GAAI,GACJF,KAAM,iBACNO,SAAU,QACVN,MAAO,gBAET,CACEC,GAAI,GACJF,KAAM,eACNO,SAAU,QACVN,MAAO,cC7CIO,EApBE,SAAC,GAAc,IAAbF,EAAY,EAAZA,OAEZG,EAAgBH,EAAOI,KAAI,SAACC,EAAKC,GACtC,OAAO,kBAAC,EAAD,CACPC,IAAOD,EACPV,GAAKI,EAAOM,GAAGV,GACfF,KAAQM,EAAOM,GAAGZ,KAClBO,SAAYD,EAAOM,GAAGL,SACtBN,MAASK,EAAOM,GAAGX,WAGpB,OACI,6BACOQ,ICPQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCASC,EAfG,SAAC,GAAkC,EAAhCC,YAAiC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACC,yBAAKlB,UAAY,MACjB,2BACCA,UAAY,mCACZmB,KAAK,SACLC,YAAc,gBACdC,SAAYH,MC6BJI,G,wDAjCX,aAAe,IAAD,8BACZ,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACR,YAAcO,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACXzB,OAASA,EACTc,YAAc,IAJJ,E,qDAgBH,IAAD,OACAY,EAAiBC,KAAKF,MAAMzB,OAAO4B,QAAO,SAAAC,GAChD,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKN,MAAMX,YAAYgB,kBAInE,OACC,yBAAKjC,UAAU,MACf,wBAAIA,UAAU,MAAd,cACA,kBAAE,EAAF,CAAYkB,aAAcY,KAAKP,iBAC/B,kBAAE,EAAF,CAAWpB,OAAQ0B,S,GA3BPM,IAAMC,YCMxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAE,EAAF,MADC,OAEAC,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.edf3692b.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Card = ({name,email,id}) => {\n\treturn (\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow'>\n         <img alt='robots' src={`https://robohash.org/${id}?50x50`}/>\n\t\t <div>\n\t\t  <h2> {name} </h2>\n\t\t  <p> {email} </p>\n\n\n\n\t\t </div>\n\t\t</div>\n\n\n\t\t);\n}\n\nexport default Card;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  },\n  {\n    id: 11,\n    name: 'Sanjana Sayeed',\n    username: 'Sanny',\n    email: 'San@great.io'\n  },\n  {\n    id: 12,\n    name: 'Samee Sayeed',\n    username: 'Samzz',\n    email: 'Genius.io'\n  },\n\n];","import React from 'react';\nimport {robots} from './robots';\nimport Card from './Card';\n//parent of Card\n\n\nconst CardList = ({robots}) => {\n\t//const robotss = Object.entries(robots);\n\tconst cardComponent = robots.map((user,i) => {\n\t\treturn <Card \n\t\tkey = {i} \n\t\tid ={robots[i].id} \n\t\tname = {robots[i].name} \n\t\tusername = {robots[i].username} \n\t\temail = {robots[i].email} />\n\n\t})\n\treturn (\n\t    <div>\n          { cardComponent }\n        </div>\n\n\n\t\t);\n}\n\nexport default CardList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\nconst SearchBox = ({ searchField , searchChange}) => {\n     return (\n      <div className = \"p2\" >\n      <input \n       className = \"pa3 ba b--green bg-lightest-blue\"\n       type='search' \n       placeholder = 'Search Robots' \n       onChange = {searchChange}\n        />\n\n      </div>\n\n      );\n}\n\nexport default SearchBox;","import React from 'react';\nimport CardList from './CardList';\nimport {robots} from './robots';\nimport SearchBox from './SearchBox';\nimport './App.css';\nclass App extends React.Component {\n    constructor() {\n      super()\n      this.state = {\n        robots : robots ,\n        searchField : ''\n      }\n    }\n\n    onSearchChange = (event) => {\n      this.setState({searchField : event.target.value})\n      \n   \n\n    }\n\n\n     render() {\n        const filteredRobots = this.state.robots.filter(robot => {\n        return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n      })\n\n\n     return (\n      <div className=\"tc\">\n      <h1 className=\"f1\"> RoboCops </h1>\n      < SearchBox searchChange={this.onSearchChange}/>\n      < CardList robots={filteredRobots} />\n      </div>\n\n      );\n}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\nimport App from './App';\n//Restructuring is needed because it is not default\n\nReactDOM.render(\n  <React.StrictMode>\n < App /> , </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}